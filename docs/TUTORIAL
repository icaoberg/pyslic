==========================================
CONVENTIONS
==========================================

 + Functions that use random numbers take a parameter R which can be used to initialise
        random numbers. See utils.get_random for details.
 + Arguments should not be modified unless expected (and stated in __doc__ string)

==========================================
IMAGE TYPE
==========================================

The Image type (pyslic.Image) is the basic type of pyslic.

Lazy Loading
~~~~~~~~~~~~

Image uses lazy loading. You create images by simply giving them paths to image files, but the images are
not loaded into memory until necessary.

For example, to load a directory full of images:

::

	pat=re.compile('images-directory/([A-Za-z]+)-[0-9]+.jpg')
	imgs=[]
	for F in glob('images-directory/*.jpg'):
		img=Image()
		match=pat.match(F)
		img.label=match.group(1)
		img.channels['protein']=F
		imgs.append(img)

This creates a list *imgs* where each element is an image.


==========================================
COMPUTING FEATURES
==========================================

There are two ways to compute features:
	* Through computefeatures()
	* Calling individual functions

The first method uses an image class, which contains the paths to the files (which must be a format understood by your Python Imaging Library instalation).

The individual functions take preprocessed images of the protein, of the DNA channel, or of the residual fluorescence.

USING COMPUTEFEATURES
~~~~~~~~~~~~~~~~~~~~~

from pyslic import Image, computefeatures

image=Image()
# Set up the images
image.channels[Image.protein_channel]='/images/image-prot.png'
image.channels[Image.dna_channel]='/images/image-dna.png'
image.channels[Image.crop_channel]='/images/image-crop.png'

F=computefeatures(image,'SLF13')
image.unload() # Save memory


